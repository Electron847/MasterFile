def string2bits(s=""):
    return [bin(ord(x))[2:].zfill(8) for x in s]


def subBytes(s=""):

    subByteMap = [
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]]

    xAxis = int(s[0],base=16)
    yAxis = int(s[1],base=16)
    #print(xAxis)
    #print(yAxis)
    if xAxis & yAxis < 16:
        #print(subByteMap[xAxis][yAxis])
        print(hex(subByteMap[xAxis][yAxis]))
    return

givenInput = [['32','43','f6','a8'],['88','5a','30','8d'],['31','31','98','a2'],['e0','37','07','34']]
CipherKey = [['2b','7e','15','16'],['28','ae','d2','a6'],['ab','f7','15','88'],['09','cf','4f','3c']]
 

for row in givenInput:
    print(row)
rez = [[givenInput[x][y] for x in range(len(givenInput))] for y in range(len(givenInput[0]))]
print("\t"+" -Original Input-"+"\n\n\n")

for row in rez:
    print(row)
print("\t"+" -Columned Input-"+"\n\n\n")

ryz = [[bin(int(rez[x][y], base=16)) for x in range(len(rez))] for y in range(len(rez[0]))]
for row in ryz:
    print(row)
print("\t"+" -Binary Input-"+"\n\n\n")

cBI = []
siz = [[ryz[x][y] for x in range(len(ryz))] for y in range(len(ryz[0]))]
for row in siz:
    cBI.append(row)
    print(row)
print("\t"+" -Columned Binary Input-"+"\n\n\n")

for row in CipherKey:
    print(row)
raz = [[CipherKey[x][y] for x in range(len(CipherKey))] for y in range(len(CipherKey[0]))]
print("\t"+" -Cipher Input-"+"\n\n\n")

for row in raz:
    print(row)

riz = [[bin(int(raz[x][y], base=16)) for x in range(len(raz))] for y in range(len(raz[0]))]
print("\t"+" -Columned Cipher Input-"+"\n\n\n")
for row in riz:
    print(row)
print("\t"+" -Cipher Binary Input-"+"\n\n\n")

ruz = [[riz[x][y] for x in range(len(riz))] for y in range(len(riz[0]))]
cCBI = []
for row in ruz:
    cCBI.append(row)
    print(row)
print("\t"+" -Columned Cipher Binary Input-"+"\n\n\n")

print(cCBI)

#XOR Columned Binary Input with Columned Binary CipherKey Input
print("\n\n")

#binList = [[cBI[x][y] for x in range(len(cBI))] for y in range(len(cBI[0]))]
#print(binList)

z = []
snazzy = 0
for index in range(len(cCBI)):
    #print(snazzy)
    xorTime = hex(int(cCBI[index][snazzy],2) ^ int(cBI[index][snazzy],2))
    u = []
    for element in range(len(cCBI)):
        blahblah = hex(int(cCBI[index][element],2) ^ int(cBI[index][element],2))
        u.append(blahblah)
    z.append(u)
   
print(z)

print("\n\n")

#subByte1 = []
#for row in z:
#    #print(row)
#    x = []
#    for index in range(len(row)):
#        subbedByte = subBytes(index)
#        x.append(subbedByte)
#    subByte1.append(x)

#print(subByte1)                      

print("\n\n\n")


#for index1 in z:
#    #print(index1)
#    row = index1
#    for element in row:
#        print(subBytes(element))
        



print("\n\n\n")

keySchedule = [
0xa0fafe1788542cb123a339392a6c7605,
0xf2c295f27a96b9435935807a7359f67f,
0x3d80477d4716fe3e1e237e446d7a883b,
0xef44a541a8525b7fb671253bdb0bad00,
0xd4d1c6f87c839d87caf2b8bc11f915bc,
0x6d88a37a110b3efddbf98641ca0093fd,
0x4e54f70e5f5fc9f384a64fb24ea6dc4f,
0xead27321b58dbad2312bf5607f8d292f,
0xac7766f319fadc2128d12941575c006e,
0xd014f9a8c9ee2589e13f0cc8b6630ca6,
        ]



newKeySchedule = []

for key in keySchedule:
    keyElement = []
    key = hex(key)
    while key:
        keyElement.append(key[:2])
        key = key[2:]
        if '0x' in keyElement:
            keyElement.remove('0x')
    newKeySchedule.append(keyElement)
print(newKeySchedule)

print("\n\n\n")

newKeySchedule_U16 = []

for aHexKey in newKeySchedule:
    row = []
    newKeySchedule_U16.append(row)
    for singleIndex in aHexKey:
        row.append(int(singleIndex, base=16))
        #print(int(singleIndex, base=16))

print(newKeySchedule_U16)
